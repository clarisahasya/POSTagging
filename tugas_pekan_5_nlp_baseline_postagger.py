# -*- coding: utf-8 -*-
"""Tugas Pekan 5 - NLP - Baseline Postagger.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19q2mDQoi4T70idhVtoz5BNdPD5PkPBdQ

#**POS Tagging : Metode Baseline**


---

Clarisa Hasya Y - 130174256
"""

import pandas as pd
import nltk
nltk.download('punkt')

"""**Read File Data Train TSV**"""

df = pd.read_csv("dataset/train.01.tsv",sep="\t", header=None)
df = df.astype(str)

# df.head()

word_tag_freq = {} # dictionary untuk menyimpan frekuensi tag kata
tag_count = {} # dictionary untuk menyimpan frekuensi tag
count_sentences = 0

for index, row in df.iterrows():
    word = row[0].lower()
    tag = row[1]    
    key = (word,tag) # simpan di dictionary kata,tag
    # print(word,tag)
    if count_sentences < 50:
        # simpan di dictionary tag
        if tag in tag_count:
            tag_count[tag] = tag_count[tag] + 1
        else:
            tag_count[tag] = 1
            
        if key in word_tag_freq:
            word_tag_freq[key] = word_tag_freq[key] + 1
        else:
            word_tag_freq[key] = 1

    if word == '.' :
        count_sentences += 1      
        if(count_sentences == 50):
            break

# print(word_tag_freq)

# print(tag_count)

"""**Fungsi untuk mengetahui tag yang paling sering muncul di data train**"""

def get_most_freq_tag():
    most_freq_tag = max(tag_count, key=tag_count.get) 
    return most_freq_tag

"""**Fungsi untuk mencari tag yang paling sering muncul pada sebuah kata**"""

def get_most_freq_tag_word(word):
    word_tags = {k: v for k, v in word_tag_freq.items() if word in k}
    sorted_word_tags = sorted(word_tags.items(), key=lambda x: x[1], reverse=True)
    if len(sorted_word_tags)>0:
        return sorted_word_tags[0]
    else:
        return None

"""**Testing**"""

dt = pd.read_csv("dataset/test_sentences.tsv",sep="\t", header=None)
dt = dt.astype(str)

kalimat_uji , tmp= [] , []
kalimat_uji_label = [] 
sentences = []

for index, row in dt.iterrows():   
    wordd = row[0].lower()
    tagg = row[1]
    keyy = (wordd,tagg) # simpan di dictionary kata,tag
    if word != 'nan':
        kalimat_uji.append(wordd)
        tmp.append(wordd)
        kalimat_uji_label.append(tagg)
        if wordd == '.' :
            sentences.append(' '.join(tmp))
            tmp = []

# sentences

"""**Hasil tagging setiap kalimat uji**"""

label_pred = []

for token in kalimat_uji:
    most_freq_tag_token = get_most_freq_tag_word(token.lower())
    if most_freq_tag_token:
        # kata terdapat di data latih
        print('kata:',token,', tag:',most_freq_tag_token[0][1])
        label_pred.append(most_freq_tag_token[0][1])
    else:
        # kata tidak terdapat di data latih
        print('kata:',token,' tidak terdapat di data latih, tag:',get_most_freq_tag())
        label_pred.append(get_most_freq_tag())

count = 0
for i in range(len(label_pred)):
    if kalimat_uji_label[i] == label_pred[i]:
        count += 1
    else:
        count += 0

print('===============================================================================================')
print('Accuracy Baseline : ', count/len(label_pred))
print('===============================================================================================')